import React, { useState, useEffect } from 'react';

import { Loader, Card, FormField } from "../components";

const RenderCards = ({ data, title }) => {
    if(data?.length > 0) {
        return data.map((post) => <Card key={post._id} {...post} />)
        // so we want to spread out all of the other post properties {...post}
    }

    return (
        <h2 className="mt-5 font-bold text-6449FF text-xl uppercase">
            {title} 
        </h2>
        )
}

const Home = () => {

    const [loading, setLoading] = useState(false);
    const [allPosts, setAllPosts] = useState(null);
    const [searchText, setSearchText] = useState('');
    const [searchedResults, setSearchedResults] = useState(null);
    const [searchTimeout, setSearchTimeout] = useState(null);

    useEffect(() => {
      const fetchPosts = async () => {
        setLoading(true);

        try {
            const response = await fetch('http://localhost:8080/api/v1/post', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                },
            })
            
            if (response.ok) {
                const result = await response.json();

                setAllPosts(result.data.reverse());
            }
        }
        catch (error) {
            alert(error);
        }
        finally {
            setLoading(false)
        }
      }
    
      fetchPosts();
    }, [])

    const handleSearchChange = (e) => {
        clearTimeout(searchTimeout); // we clear searchTimeout everytime we start to typing something new
        setSearchText(e.target.value);

        setSearchTimeout(
            setTimeout(() => {
                const searchResults = allPosts.filter((item) => 
                item.name.toLowerCase().includes(searchText.toLowerCase()) || // if that is the case, we can filter it out
                item.prompt.toLowerCase().includes(searchText.toLowerCase()) 
            );
    
            setSearchedResults(searchResults)
            }, 500) // we added a debounce to the search query, i.e not fetching the results for every single keystroke. so we use a setTimeOut
        );
    }
    

  return (
    <section className='max-w-7xl mx-auto'>
        <div>
        <h1 className="font-extrabold text-[#222328] text-[32px]">Welcome To Hogwarts</h1>
        <p className="mt-2 text-[#666E75] text-[16px] max-w-[500px]">
            Browse through an assemblage of Magic and Spells generated by DALL-E AI Wizard
        </p>
        </div>
        <div className="mt-16">
            <FormField 
                labelName="Search Posts"
                type="text"
                name="text"
                placeholder="Search for magic spells"
                value={searchText}
                handleChange={handleSearchChange}
            />
        </div>

        <div className="mt-10">
            {loading ? (
                <div className="flex justify-center items-center">
                    <Loader />
                </div>
            ) : (
                <>
                {searchText && (
                    <h2 className="font-medium text-[#666E75] text-xl mb-3">
                        <span className='text-[#222383]'>
                            Showing results for  
                        </span> {searchText}
                    </h2>
                )}
                <div className="grid lg:grid-col-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
                    {searchText ? (
                        <RenderCards
                            data={searchedResults}
                            title="No search results found"
                        /> 
                    ) : (
                        <RenderCards
                            data={allPosts}
                            title="No posts found"
                        />    
                    )}
                </div>
                </>
            )}
        </div>
    </section>
  )
}

export default Home